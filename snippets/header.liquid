{% comment %}
{% for link in linklists.main-menu.links %}
{% assign child_list_handle = link.title | handleize %}
{% if linklists[child_list_handle].links != blank %}
<a href="{{ link.url }}">{{ link.title }}</a>
[{% for childlink in linklists[child_list_handle].links %}
<a href="{{ childlink.url }}">{{ childlink.title | escape }}</a>
{% endfor %}]
{% else %}
<a href="{{ link.url }}">{{ link.title }}</a>
{% endif %}
{% endfor %}

{% if shop.customer_accounts_enabled %}
{% if customer %}
<a href="/account">account</a>
{{ 'log out' | customer_logout_link }}
{% else %}
{{ 'log in ' | customer_login_link }}
{{ 'register' | customer_register_link }}
{% endif %}
{% endif %}
{% endcomment %}

<header class="header" id="header">
    <div class="header-inner flex space-between">
        
    
    <div class="menu-drawer">
        {% unless template == "product" %}
        <button class="menu-button">
            <span>Menu</span>
        </button>
        {% else %}
        <a href="javascript:history.back()" class="menu-button">
            <span>Back</span>
        </a>
        {% endunless %}
    </div>

    <a href="/" class="header-title">{{ shop.name }}</a>

    <div class="cart-button-container" @click="toggleMiniCart">
        <button class="cart-button">
            <span>
                <template v-if="cart">
                    Cart (${cart.item_count})
                </template>  
            </span>
        </button>
    </div>
    </div>

    <div class="mini-cart" :class="{ hidden: miniCart }">
        <button class="mini-cart-close-button" @click="toggleMiniCart">Close</button>
        {% render 'mini-cart' %}
    </div>

    <div class="outside" v-if="!miniCart || !menuDrawer" @click="closeAllDrawers"></div>

</header>

<script>


    if (document.querySelector('#header')) {
        const headerCart = Vue.createApp({
            delimiters: ['${', '}'],
            data() {
                return {
                    cartData: store.state.cartState
                }
            },
            methods: {
                toggleMiniCart() {
                    toggleMiniCart.openCart()
                },
                closeAllDrawers() {
                    toggleClose.closeAll()
                },
                decrement(item) {
                    const data = {
                        "id": item.key,
                        "quantity": item.quantity - 1
                    }

                    axios.post('/cart/change.js', data)
                        .then(response => {
                            store.getCart()
                        })
                        .catch(error => console.log(error))
                },
                increment(item) {
                    const data = {
                        "id": item.key,
                        "quantity": item.quantity + 1
                    }

                    axios.post('/cart/change.js', data)
                        .then(response => {
                            store.getCart()
                        })
                        .catch(error => console.log(error))
                },
                money(value) {
                    if (!value) return 0
                    return "$" + (value / 100).toFixed(2)
                }
            },
            computed: {
                miniCart() {
                    return miniCartState.hidden
                },
                menuDrawer() {
                    return menuState.hidden
                },
                cart() {
                    return this.cartData[0]
                }
            }, 
            created() {
                store.getCart()
            }
        }).mount('#header')
    }

</script>

